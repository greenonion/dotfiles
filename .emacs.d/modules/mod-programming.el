;; -----------------------------
;; Configuration for programming
;; -----------------------------
(provide 'mod-programming)

;; remove some backends from vc-mode
(setq vc-handled-backends '(git))

;; subword navigation
(use-package subword
  :hook (prog-mode . subword-mode)
  :diminish subword-mode)

(use-package deadgrep
  :straight t
  :defer 5
  :config
  (global-set-key (kbd "<f5>") #'deadgrep))

(use-package restclient
  :straight t
  :mode ("\\.rest\\'" . restclient-mode))

(use-package nix-mode
  :straight t
  :mode "\\.nix\\'")

(use-package dockerfile-mode
  :straight t
  :mode (("Dockerfile\\'" . dockerfile-mode)))

(use-package org
  :bind (("C-c l" . org-store-link)
         ("C-c a" . org-agenda)
         ("C-c b" . org-iswitchb)))

;; Elasticsearch

(use-package es-mode
  :straight t
  :mode "\\.es$"
  :hook (;(es-mode . auto-indent-mode)
         (es-result-mode . hs-minor-mode))
  :init
  (defun my/turn-off-visual-fill ()
    (visual-fill-column-mode -1))
  (add-hook 'es-result-mode-hook #'my/turn-off-visual-fill)
  :config
  (setq es-warn-on-delete-query nil
        es-always-pretty-print t))

;; Jump between the same variable in multiple places.
;; (use-package smartscan
;;   :straight t
;;   :init (add-hook #'prog-mode-hook #'smartscan-mode)
;;   :config
;;   (bind-key "M-'" #'other-window smartscan-map))

;; Highlighting
;; ------------

(use-package highlight-numbers
  :straight t
  :hook (prog-mode . highlight-numbers-mode))

(use-package highlight-escape-sequences
  :straight t
  :hook (prog-mode . hes-mode))

;; highlight FIXME and TODO
(defun my/add-watchwords ()
  "Highlight FIXME, TODO, and NOCOMMIT in code TODO"
  (font-lock-add-keywords
   nil '(("\\<\\(TODO\\(?:(.*)\\)?:?\\)\\>"  1 'warning prepend)
         ("\\<\\(FIXME\\(?:(.*)\\)?:?\\)\\>" 1 'error prepend)
         ("\\<\\(NOCOMMIT\\(?:(.*)\\)?:?\\)\\>"  1 'error prepend))))

(add-hook 'prog-mode-hook #'my/add-watchwords)

;; Auto-indentation
;; ----------------

(electric-indent-mode 1)

;; Ignore electric indentation for python and yaml
(defun electric-indent-ignore-mode (char)
  "Ignore electric indentation for yaml-mode"
  (if (equal major-mode 'yaml-mode)
      'no-indent
    nil))
(add-hook 'electric-indent-functions 'electric-indent-ignore-mode)

;; Automatic layout
(electric-layout-mode 1)

;; Parenthesis matching
;; --------------------

;; Automatically insert pairs of characters
(electric-pair-mode 1)
(setq electric-pair-preserve-balance t
      electric-pair-delete-adjacent-pairs t
      electric-pair-open-newline-between-pairs nil)
(show-paren-mode 1)

(use-package smartparens
  :straight t
  :disabled t
  :diminish smartparens-mode
  :init
  (electric-pair-mode -1)
  (require 'smartparens-config)
  (smartparens-global-strict-mode 1))

;; flycheck
;; --------

(use-package flycheck
  :straight t
  :defer 5
  :bind (("M-g M-n" . flycheck-next-error)
         ("M-g M-p" . flycheck-previous-error)
         ("M-g M-=" . flycheck-list-errors))
  :init
  (require 'flycheck)
  (global-flycheck-mode)
  (setq flycheck-indication-mode 'right-fringe
        flycheck-check-syntax-automatically '(save mode-enabled))
  :diminish flycheck-mode
  :config
  (progn
    (setq-default flycheck-disabled-checkers
                  '(emacs-lisp-checkdoc
                    ruby-reek
                    javascript-jshint
                    json-jsonlint
                    json-python-json))
    (use-package flycheck-pos-tip
      :straight t
      :init
      (flycheck-pos-tip-mode)
      (setq flycheck-pos-tip-timeout 10
            flycheck-display-errors-delay 0.5))
    (use-package helm-flycheck
      :straight t
      :init (define-key flycheck-mode-map (kbd "C-c ! h") 'helm-flycheck))))

;; ****************************
;; Programming Language Support
;; ****************************

;; Coffeescript
;; ------------

(use-package coffee-mode
  :straight t
  :mode (("\\.coffee.erb\\'" . coffee-mode))
  :config
  (setq coffee-tab-width 2)
  ;; remove the "Generated by CoffeeScript" header
  (add-to-list 'coffee-args-compile "--no-header"))

;; Emacs Lisp
;; ----------

(use-package paredit
  :straight t
  :hook ((emacs-lisp-mode . paredit-mode)
         (ielm-mode . paredit-mode))
  :commands paredit-mode
  :diminish "()"
  :config
  (bind-key "M-)" #'paredit-forward-slurp-sexp paredit-mode-map)
  (bind-key "C-(" #'paredit-forward-barf-sexp paredit-mode-map)
  (bind-key "C-)" #'paredit-forward-slurp-sexp paredit-mode-map)
  (bind-key ")" #'paredit-close-parenthesis paredit-mode-map)
  (bind-key "M-\"" #'my/other-window-backwards paredit-mode-map)
  (bind-key "C-M-f" #'paredit-forward paredit-mode-map)
  (bind-key "C-M-b" #'paredit-backward paredit-mode-map))

(use-package eldoc
  :diminish eldoc-mode
  :hook
  ((emacs-lisp-mode . eldoc-mode)
   (ielm-mode . eldoc-mode)
   (lisp-interaction-mode . eldoc-mode))
  :config
  (setq eldoc-idle-delay 0.1))

(defun ielm-other-window ()
  "Run ielm on other window"
  (interactive)
  (switch-to-buffer-other-window
   (get-buffer-create "*ielm*"))
  (call-interactively 'ielm))

(define-key emacs-lisp-mode-map (kbd "C-c C-z") 'ielm-other-window)
(define-key lisp-interaction-mode-map (kbd "C-c C-z") 'ielm-other-window)

;; pretty print results
(bind-key "M-:" 'pp-eval-expression)

(use-package elisp-slime-nav
  :straight t
  :diminish elisp-slime-nav-mode
  :hook (emacs-lisp-mode . elisp-slime-nav-mode))

(defun my/eval-last-sexp-or-region (prefix)
 "Eval region from BEG to END if active, otherwise the last sexp."
 (interactive "P")
 (if (and (mark) (use-region-p))
 (eval-region (min (point) (mark)) (max (point) (mark)))
 (pp-eval-last-sexp prefix)))

(bind-key "C-x C-e" 'my/eval-last-sexp-or-region emacs-lisp-mode-map)

(define-key lisp-mode-shared-map (kbd "RET") 'reindent-then-newline-and-indent)

;; Javascript
;; ----------

(use-package add-node-modules-path
  :straight t
  :config (add-hook 'flycheck-mode-hook #'add-node-modules-path))

;; Python
;; ------

(use-package python
  :defer t
  :init
  (setq mode-name "Python"))

;; Racket
;; ------

(use-package scheme-mode
  :hook (scheme-mode . paredit-mode))

(use-package geiser
  :straight t
  :hook
  (geiser-repl-mode . my/trailing-whitespace))

;; Ruby
;; ----

(use-package ruby-mode
  :mode (("\\.rake\\'" . ruby-mode)
         ("Rakefile\\'" . ruby-mode)
         ("\\.gemspec\\'" . ruby-mode)
         ("\\.ru\\'" . ruby-mode)
         ("Gemfile\\'" . ruby-mode)
         ("Guardfile\\'" . ruby-mode)
         ("Capfile\\'" . ruby-mode)
         ("\\.cap\\'" . ruby-mode))
  :hook
  (ruby-mode . company-mode)
  :config
  (setq ruby-insert-encoding-magic-comment nil))

;; We use rubocop via solargraph
(use-package rubocop
  :hook (ruby-mode . rubocop-mode)
  :diminish rubocop-mode
  :disabled t)

(use-package ruby-tools
  :straight t
  :hook
  (ruby-mode . ruby-tools-mode)
  :diminish ruby-tools-mode)

(use-package rbenv
  :straight t
  :defer 25
  :init
  ;; I don't really care about the active Ruby in the modeline
  (setq rbenv-show-active-ruby-in-modeline nil)
  (global-rbenv-mode t))

(use-package rspec-mode
  :straight t
  :defer 20
  :diminish rspec-mode
  :commands rspec-mode
  :config
  (setq rspec-use-rvm nil))

(defadvice rspec-compile (around rspec-compile-around)
  "Use BASH shell for running the specs because of ZSH issues."
  (let ((shell-file-name "/bin/bash"))
    ad-do-it))

(ad-activate 'rspec-compile)

(use-package inf-ruby
  :straight t
  :init
  (add-hook 'after-init-hook 'inf-ruby-switch-setup))

;; Rust
;; ----

(use-package rust-mode
  :straight t
  :mode (("\\.rs\\'" . rust-mode))
  :hook
  (rust-mode . company-mode)
  (rust-mode . lsp))

(use-package flycheck-rust
  :straight t
  :hook (flycheck-mode . flycheck-rust-setup))

(use-package toml-mode
  :straight t)

;; Shell scripts

(add-to-list 'auto-mode-alist '("\\.zsh$" . shell-script-mode))
